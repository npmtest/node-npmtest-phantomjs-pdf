{"/home/travis/build/npmtest/node-npmtest-phantomjs-pdf/test.js":"/* istanbul instrument in package npmtest_phantomjs_pdf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phantomjs-pdf/lib.npmtest_phantomjs_pdf.js":"/* istanbul instrument in package npmtest_phantomjs_pdf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_phantomjs_pdf = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_phantomjs_pdf = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-phantomjs-pdf/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-phantomjs-pdf && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_phantomjs_pdf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_phantomjs_pdf\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_phantomjs_pdf.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_phantomjs_pdf.rollup.js'] =\n            local.assetsDict['/assets.npmtest_phantomjs_pdf.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_phantomjs_pdf.__dirname + '/lib.npmtest_phantomjs_pdf.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phantomjs-pdf/node_modules/phantomjs-pdf/lib/phantomjs-pdf.js":"\"use strict\"\r\n\r\nvar fs = require(\"fs\"),\r\n\tpath = require(\"path\"),\r\n\tphantom = require(\"phantomjs\"),\r\n\tchildProcess = require(\"child_process\"),\r\n\ttmp = require(\"tmp\"),\r\n\tasync = require(\"async\"),\r\n\tdebug = require('debug')('phantomjs-pdf'),\r\n\tPDFResult = require(\"./pdfResult.js\");\r\n\r\n/* TODO: Add config for HTML2PDF class.\r\n * Including path to skeleton html file\r\n */\r\n\r\n/* Evaluates and converts input HTML, CSS and JS to PDF\r\n * \r\n * Callback format: callback(err, result)\r\n * If err === null, function succeeded.\r\n */\r\n\r\nfunction convert(options, callback) {\r\n\tvar options = options || {},\r\n    html = options.html || '<p>No HTML source specified!</p>',\r\n    css = options.css || '',\r\n    js = options.js || '',\r\n    runnings = options.runnings || '',\r\n    deleteOnAction = options.deleteOnAction || false;\r\n\r\n    /* Create temporary files for PDF, HTML, CSS and JS storage\r\n     * We need to wait for all of them to finish creating the files before proceeding.\r\n     */\r\n    async.series([\r\n\t    function(callback) {\r\n\t    \tcreateTempFile(\".html\", html, callback);\r\n\t    },\r\n\t    /* PDF file is necessary for further access within Node */\r\n\t    function(callback) {\r\n\t    \tcreateTempFile(\".pdf\", \"\", callback);\r\n\t    },\r\n\t    /* Create optional CSS injection file */\r\n\t    function(callback) {\r\n\t    \t(css) ? createTempFile(\".css\", css, callback) : callback(null, null);\r\n\t    },\r\n\t    /* Create optional JS injection file */\r\n\t    function(callback) {\r\n\t    \t(js) ? createTempFile(\".js\", js, callback) : callback(null, null);\r\n\t    },\r\n\t    /* Create runnings (JSON header, footer) file */\r\n\t    function(callback) {\r\n\t    \t(runnings) ? createTempFile(\".runnings\", runnings, callback) : callback(null, \"nofile\");\r\n\t    },\r\n\t],\r\n\t/* err/results-Structure\r\n\t * [0] = HTML temp file\r\n\t * [1] = PDF temp file\r\n\t * [2] = CSS temp file\r\n\t * [3] = JS temp file\r\n\t * [4] = Runnings temp file\r\n\t */\r\n\tfunction(err, results) {\r\n\t    var paperFormat = \"A4\";\r\n\t\tvar paperOrientation = \"portrait\";\r\n\t\tvar paperBorder = \"1cm\";\r\n\t\tvar renderDelay = 500;\r\n\r\n\t\t/* All necessary files have been created.\r\n\t     * Construct arguments and create a new phantom process.\r\n\t     */\r\n\t    var childArgs = [\r\n\t\t\tpath.join(__dirname, \"phantom-script.js\"),\r\n\t\t\tresults[0],\t\r\n\t\t\tresults[1],\r\n\t\t\tresults[2],\r\n\t\t\tresults[3],\r\n\t\t\tresults[4],\r\n\t\t\tpaperFormat,\r\n\t\t\tpaperOrientation,\r\n\t\t\tpaperBorder,\r\n\t\t\trenderDelay\r\n\t\t];\r\n\r\n\t\tchildProcess.execFile(phantom.path, childArgs, function(err, stdout, stderr) {\r\n\t\t\tvar opPointer = new PDFResult(err, results[1]);\r\n\r\n\t\t\tif (typeof callback === \"function\") {\r\n\t\t\t\tcallback(opPointer);\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\nfunction createTempFile(extension, contents, callback)\r\n{\r\n\tvar needsTempFile = false;\r\n\r\n\ttry {\r\n\t\tif (fs.lstatSync(path.resolve(contents)).isFile()) {\r\n\t\t\tdebug('Found file \"%s\"', contents);\r\n\t\t\tcallback(null, path.resolve(contents));\t\r\n\t\t} else {\r\n\t\t\tneedsTempFile = true;\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tneedsTempFile = true;\r\n\t}\r\n\r\n\tif (needsTempFile) {\r\n\t\tdebug('Creating temp %s...', extension);\r\n\t\ttmp.file({postfix: extension}, function (err, tmpPath, tmpFd) {\r\n\t\t    if (err) { callback(err, null); }\r\n\r\n\t\t    var buffer = new Buffer(contents);\r\n\r\n\t\t    fs.write(tmpFd, buffer, 0, buffer.length, null, function(err, written, buffer) {\r\n\t\t    \tif (err) { debug('Could not create temp file! %s', err); }\r\n\t\t    \t\r\n\t\t    \tfs.close(tmpFd);\r\n\t\t    \tcallback(null, tmpPath);\r\n\t\t    });\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexports.convert = convert;","/home/travis/build/npmtest/node-npmtest-phantomjs-pdf/node_modules/phantomjs-pdf/lib/pdfResult.js":"\"use strict\"\r\n\r\nvar fs = require(\"fs\"),\r\n\ttmp = require(\"tmp\"),\r\n\tdebug = require('debug')('phantomjs-pdf');\r\n\r\nvar method = PDFResult.prototype;\r\n\r\nfunction PDFResult(err, tmpPath, deleteOnAction) {\r\n    this._err = err;\r\n    this._tmpPath = tmpPath;\r\n    this._deleteOnAction = deleteOnAction;\r\n    this._invalid = false;\r\n}\r\n\r\nmethod.toStream = function() {\r\n\tif (this._invalid) throw new Error('PDFResult became invalid after deletion!');\r\n\r\n\treturn fs.createReadStream(this._tmpPath);\r\n};\r\n\r\nmethod.toBuffer = function(callback) {\r\n\tif (this._invalid) throw new Error('PDFResult became invalid after deletion!');\r\n\r\n\tvar buffers = [];\r\n\tvar buffer;\r\n\tvar stream = fs.createReadStream(this._tmpPath);\r\n\tvar resultObject = this;\r\n\r\n\tstream.on('data', function(data) { \r\n\t\tbuffers.push(data); \r\n\t});\r\n\r\n\tstream.on('end', function() {\r\n\t\tbuffer = Buffer.concat(buffers);\r\n\r\n\t\tif (resultObject._deleteOnAction) { resultObject.deleteTmpFile(); }\r\n\t\tif (typeof callback === \"function\") { callback(buffer); }\r\n\t});\r\n};\r\n\r\nmethod.getTmpPath = function() {\r\n    return this._tmpPath;\r\n};\r\n\r\nmethod.toFile = function(path, callback) {\r\n\tif (this._invalid) throw new Error('PDFResult became invalid after deletion!');\r\n\r\n\tvar outputStream = fs.createWriteStream(path);\r\n    var operation = fs.createReadStream(this._tmpPath).pipe(outputStream);\r\n    var resultObject = this;\r\n\r\n\toperation.on('close', function() {\r\n\t\tif (resultObject._deleteOnAction) { resultObject.deleteTmpFile(); }\r\n\t\tif (typeof callback === \"function\") { callback(); }\r\n\t});\r\n};\r\n\r\nmethod.deleteTmpFile = function() {\r\n\tvar resultObject = this;\r\n\r\n\tfs.unlink(this._tmpPath, function (err) {\r\n\t  if (err) throw err;\r\n\r\n\t  debug('Successfully deleted \"%s\"', resultObject._tmpPath);\r\n\t  resultObject._tmpPath = '';\r\n\t  resultObject._invalid = true;\r\n\t});\r\n}\r\n\r\nmodule.exports = PDFResult;","/home/travis/build/npmtest/node-npmtest-phantomjs-pdf/node_modules/phantomjs-pdf/lib/phantom-script.js":"var system = require(\"system\"),\r\n    page = require(\"webpage\").create(),\r\n    fs = require(\"fs\");\r\n\r\nvar cmdArgs = [\"htmlPath\", \r\n            \"pdfPath\", \r\n            \"cssPath\", \r\n            \"jsPath\", \r\n            \"runningsPath\", \r\n            \"paperFormat\", \r\n            \"paperOrientation\", \r\n            \"paperBorder\", \r\n            \"renderDelay\"];\r\n\r\nargs = cmdArgs.reduce(function (args, name, i) {\r\n    args[name] = system.args[i + 1];\r\n    return args;\r\n}, {});\r\n\r\npage.open(page.libraryPath + \"/skeleton.html\", function (status) {\r\n  \r\n  if (status == \"fail\") {\r\n    page.close();\r\n    phantom.exit(1);\r\n    return;\r\n  }\r\n  \r\n  /* Add HTML source to the page */\r\n  page.evaluate(function(html) {\r\n    var body = document.querySelector(\"body\")\r\n\r\n    body.innerHTML = html\r\n  }, fs.read(args.htmlPath));\r\n\r\n  /* Add CSS source to the page */\r\n  page.evaluate(function(cssPath) {\r\n    var head = document.querySelector(\"head\");\r\n    var css = document.createElement(\"link\");\r\n    \r\n    css.rel = \"stylesheet\";\r\n    css.href = cssPath;\r\n    \r\n    head.appendChild(css);\r\n  }, args.cssPath);\r\n\r\n  /* Add JS source to the page */\r\n  page.evaluate(function(jsPath) {\r\n    var head = document.querySelector(\"head\");\r\n    var script = document.createElement(\"script\");\r\n    \r\n    script.src = jsPath;\r\n    \r\n    head.appendChild(script);\r\n  }, args.jsPath);\r\n\r\n  /* Alter pagesize according to specified header/footer data */\r\n  var defaultFormat = {format: args.paperFormat, orientation: args.paperOrientation, border: args.paperBorder};\r\n  page.paperSize = defaultFormat;\r\n\r\n  if (args.runningsPath !== \"nofile\") {\r\n    var runnings = require(args.runningsPath);\r\n    page.paperSize = paperSize(args.runningsPath, defaultFormat);\r\n  }\r\n\r\n  /* Render the page */\r\n  setTimeout(function () {\r\n    page.render(args.pdfPath);\r\n    page.close();\r\n    phantom.exit(0);\r\n  }, parseInt(args.renderDelay, 10));\r\n  \r\n});\r\n\r\nfunction paperSize(runningsPath, obj) {\r\n  // encapsulate .contents into phantom.callback()\r\n  //   Why does phantomjs not support Array.prototype.forEach?!\r\n  var keys = [\"header\", \"footer\"]\r\n  for (var i = 0; i < keys.length; i++) {\r\n    var which = keys[i]\r\n    if (runnings[which]\r\n      && runnings[which].contents\r\n      && typeof runnings[which].contents === \"function\") {\r\n      obj[which] = {\r\n        contents: phantom.callback(runnings[which].contents)\r\n      }\r\n      if (runnings[which].height)\r\n        obj[which].height = runnings[which].height\r\n    }\r\n  }\r\n  \r\n  return obj\r\n}"}